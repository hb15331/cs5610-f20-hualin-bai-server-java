package com.example.cs5610f20serverjavahualinbai.services;

import com.example.cs5610f20serverjavahualinbai.models.Widget;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;


public class WidgetService {

  // hardcode a local list of widgets to simulate a database
  List<Widget> widgets = new ArrayList<>();



  // add token api to tell that this is not physical directory structure
  // but an api meant for dynamic data access
  public List<Widget> findAllWidgets() {
    return widgets;
  }


  public List<Widget> findWidgetsForTopic(String topicId) {
    // ws: widgets for a particular topic
    List<Widget> ws = new ArrayList<>();
    for (Widget w : widgets) {
      if (w.getTopicId().equals(topicId)) {
        ws.add(w);
      }
    }
    return ws;
  }


  // reference the path param, parse it and convert to String, and then pass to widgetId
  public Widget findWidgetById(String widgetId) {
    for (Widget w : widgets) {
      if (w.getId().equals(widgetId)) {
        return w;
      }
    }
    return null;
  }

  // listen to incoming POST request
  // the RequestBody represents the body parsed from the request
  // parse JSON from the body of HTTP request coming from client
  // then the RequestBody tries to create an instance of type widget and
  // map the properties specified by client to the properties of widget
  // expect the parsed JSON object also has the same set of properties (id, name, type)
  // except id is not passed to widget since it is generated by database
  public Widget createWidget(Widget widget) {
    // simulate the fact that id used as primary key is set by database
    widget.setId(new Date().toString());
    // supposedly would be an insert into database
    widgets.add(widget);
    // return the actual object inserted to database
    return widget;
  }


  // TODO: updateWidget, deleteWidget
  // widgetId is populated with the path var from incoming HTTP request
  // newWidget is populated with the new object from incoming HTTP request
  public Integer updateWidget(
      String widgetId,
      Widget newWidget) {
    for (Widget w : widgets) {
      if (w.getId().equals(widgetId)) {
        w.setName(newWidget.getName());
        w.setType(newWidget.getType());
        w.setText(newWidget.getText());
        w.setSize(newWidget.getSize());
        return 1;
      }
    }
    return 0; // return an int status
  }


  public Integer deleteWidget(String widgetId) {
    for (Widget w : widgets) {
      if (w.getId().equals(widgetId)) {
        widgets.remove(w);
        return 1;
      }
    }
    return 0;
  }


  public List<Widget> moveWidget(String topicId, String widgetId, String direction) {
    List<Widget> widgetsForTopic = findWidgetsForTopic(topicId);
    Widget widget = findWidgetById(widgetId);
    Integer prevOrder = widget.getWidgetOrder();

    for (Widget w : widgetsForTopic) {
      if (direction.equals("up")) {
        // if the current widget is immediately above the selected widget
        // moves down the current widget
        if (w.getWidgetOrder() == prevOrder - 1) {
          w.setWidgetOrder(w.getWidgetOrder() + 1);
        }
        // if the current widget is the selected widget
        // moves up the selected widget
        if (w.getId().equals(widgetId)) {
          w.setWidgetOrder(prevOrder - 1);
        }
      }
      // TODO: MOVE DOWN
    }

    // sort the widget list based on the order of each widget
    widgetsForTopic.sort((w1, w2) -> w1.getWidgetOrder().compareTo(w2.getWidgetOrder()));
    return widgetsForTopic;
  }



}
